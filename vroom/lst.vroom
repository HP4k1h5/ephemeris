Test file for ephemeris/autoload/lst.vim
Test list, task, checkbox method functionality

SETUP
Source lst
  : source ../autoload/ephemeris/lst.vim 
Source var 
  :source ../autoload/ephemeris/fun/var.vim



TEST filter 1

lst#filter_tasks() should delete completed tasks from the buffer. a completed
task is defined as one that starts with the string `- [x]`. lst#filter_tasks()
removes lines including a line beginning with the completed task marker, up to
the end of the file or an incomplete task. this means, currently if you have a
completed task, followed 

? Does ephemeris#lst#filter_tasks remove completed tasks and leave incomplete
? tasks and everything else ?
Add three lines of tasks and headers for checking purposes
  % START<CR>
  % - [x] complete task A, should be removed<CR>
  % - [ ] incomplete task B
Call the function
  : call ephemeris#lst#filter_tasks()
Check that the incomplete task has been removed
  START
  - [ ] incomplete task B
  @clear

? Does ephemeris#lst#filter_tasks and subsequent lines upto an incomplete
? task or EOF ?
Add headers for checking purposes
Add a completed task
Add several types of lines that should also be filtered when filtering out
completed tasks.
Add an incomplete task that should not be removed
Add several types of lines that should also NOT be filtered out when filtering
out completed tasks
  % START<CR>
  % - [x] complete task A, should be removed<CR>
  % other stuff starting at col 0 <CR>
  %   indented lines without any task<CR>
  % - a list item with no task below the completed task<CR>
  % - [ ] incomplete task B<CR>
  %   indented lines without any task<CR>
  % - a list item with no task below the incomplete task
Call the function
  : call ephemeris#lst#filter_tasks()
Check that the incomplete task has been removed
  START
  - [ ] incomplete task B
    indented lines without any task
  - a list item with no task below the incomplete task
  @clear



TEST filter 2

By default ephemeris#lst#filter_tasks will try not to delete too many lines of
possibly non task-related material. Prior to v.05, this was not the case, and
the function would treat all text after a completed task `- [x]` UNTIL either
EOF or an incomplete task `- [ ]`.

This was usually not a huge issue if kept your todos at the bottom of your diary
entries, but the filter had no specified way of halting its line deletion, other
than not deleting incomplete tasks and their associated material.

In v.05 and up, ephemeris#lst#toggle_task will try to be more careful and still
delete all sub-blocks associated with complete tasks, but stop deleting on
muliple line-breaks, and repeating instances of the `g:ephemeris_todos`
marker.

? Does ephemeris#lst#filter_tasks stop filtering on `g:ephemeris_todos` with no
? setting ?

If the user provides no string for g:ephemeris_todos then a default will be set
by the program. Currently this is set by functions such as `lst#copy_todos`,
and will probably continue to be since this program doesnt run at
instantiation, and ephemeris will have to be able to rebuild state from scratch
on each invocation.

SETUP

TEST stop on repeated todos
Add header
Add completed task
Add non task sub
Add other NON-task related material
  % START<CR>
  % - [x] complete task A, should be removed<CR>
  % other stuff starting at col 0 <CR>
  %   indented lines without any task<CR>
  % - a list item with no task below the completed task<CR>
Add g:ephemeris_todos marker string 
This should stop the filter from removing subsequent lines
  % end TODOs<CR>
  % text after g:ephemeris_todos marker<CR>
  % - a list item with no task below the g:ephemeris_todos marker
Call the function
  : call ephemeris#lst#filter_tasks()
Check that the complete task has been removed and that text after the g:ephemeris_todos marker has been kept
  START
  end TODOs
  text after g:ephemeris_todos marker
  - a list item with no task below the g:ephemeris_todos marker
  @clear


TEST continue after repeated todos
Add header
Add completed task
Add non task sub
Add g:ephemeris_todos marker
Add other NON-task related material
  % START<CR>
  % - [x] complete task A, should be removed<CR>
  % other stuff starting at col 0 <CR>
  %   indented lines without any task<CR>
  % - a list item with no task below the completed task<CR>
Add g:ephemeris_todos string 
This should stop the filter from removing subsequent lines
  % end TODOs<CR>
  % text after g:ephemeris_todos marker<CR>
  % - a list item with no task below the g:ephemeris_todos marker<CR>
Add SUBSEQUENT completed tasks to be filtered out
  % - [x] complete task B. should be removed<CR>
  %  - other list items non-tasks<CR>
  % indented lines following this task<CR>
Add incomplete tasks that should be kept
  %  - [ ] incomplete task C<CR>
  %    - list stuff to keep<CR>
Call the function
  : call ephemeris#lst#filter_tasks()
Check that the complete task has been removed and that the incomplete tasks have
been kept
  START
  end TODOs
  text after g:ephemeris_todos marker
  - a list item with no task below the g:ephemeris_todos marker
   - [ ] incomplete task C
     - list stuff to keep
  @clear


TEST stop filter on 2 newlines
Add header
Add completed task
Add non task sub
Add other NON-task related material
  % START<CR>
  % - [x] complete task A, should be removed<CR>
  % other stuff starting at col 0 <CR>
  %   indented lines without any task<CR>
  % - a list item with no task below the completed task<CR>
Add newline
  % <CR>
  % <CR>
  %  - [ ] incomplete task C<CR>
  %    - list stuff to keep
Call the function
  :call ephemeris#lst#filter_tasks()
Check that the complete task has been removed and that the incomplete tasks
have been kept
  START
  
  
   - [ ] incomplete task C
     - list stuff to keep
  @clear


TEST filter 3

Add a nested checkbox marker
  % - [ - [x]]
Run filter todos
  : call ephemeris#lst#filter_tasks()
Expect the whole line to be deleted
  
^^Dont delete two blank spaces above!!
  @clear

Add a nested checkbox marker
  % - [ - [ ]]
Run filter todos
  : call ephemeris#lst#filter_tasks()
Expect the whole line to be preserved
  - [ - [ ]]
  @clear



TEST toggle 

lst#toggle_task() should toggle the state of a task between complete
`- [x]` and incomplete `- [ ]`. it should not effect other parts of
the line or subsequent/previous lines.
Does ephemeris#lst#toggle_task toggle incomplete -> complete with and without
text ?
  % - [ ] 
  : call ephemeris#lst#toggle_task()
  - [x] 
  @clear
  % - [ ] test text A
  : call ephemeris#lst#toggle_task()
  - [x] test text A

Does ephemeris#lst#toggle_task toggle complete -> incomplete with and without
text ?
  @clear
  % - [x] 
  : call ephemeris#lst#toggle_task()
  - [ ] 
  @clear
  % - [x] test text B
  : call ephemeris#lst#toggle_task()
  - [ ] test text B
  @clear

Add a nested checkbox marker
  % - [ - [ ]]
Run toggle task
  : call ephemeris#lst#toggle_task()
Expect the interior checkbox to be toggled
  - [ - [x]]
  @clear



TEST copytodos

This test will have to create a fake entry with TODOS either a new one each
time, with a date prior to the date the test is run, or a default one with a
recent date that will currently be valid for 10 years as of Sun May 17 08:02:54
2020. the test should guarantee that both the prior mock entry and the current 
day'smock entry are deleted prior to exiting the test

SETUP
Set g:ephemeris_todos 
  : echom exists('g:calendar_diary')
  ~ 0
  : let g:calendar_diary = '/tmp/vroom_diary'
Expect ephemeris#lst#get_calendar_diary to have string
  : echom exists('g:calendar_diary')
  ~ 1
Echo get_calendar_diary return to term
  : echom ephemeris#fun#var#get_calendar_diary()
  ~ /tmp/vroom_diary
Create a file for date prior to current date.


RUN

TEARDOWN

