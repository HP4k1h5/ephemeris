~ Test var.vim

Before (set exception strings and buffer vars):
  let b:tst_g_diary_exception = 'required global variable `g:ephemeris_diary` has not been set' 
  \ .'... set with `:let g:ephemeris_diary="~/diary"`'
  let b:tst_dir = './.vader_test'
  let b:tst_ephemeris_diary = b:tst_dir.'/vader_diary'


# test ephemeris#var#get_g_diary

" g:ephemeris_diary should not exist, therefore
Execute (get_g_diary and expect it to throw):
  if exists('g:ephemeris_diary')
    unlet g:ephemeris_diary
  endif
  AssertThrows call ephemeris#var#get_g_diary()
  AssertEqual b:tst_g_diary_exception, g:vader_exception

" get_g_diary must return an expanded path
Execute (set g:ephemeris_diary and get):
  let g:ephemeris_diary = b:tst_ephemeris_diary
  AssertEqual b:tst_ephemeris_diary, g:ephemeris_diary
  AssertEqual expand(b:tst_ephemeris_diary), ephemeris#var#get_g_diary()

# Test ephemeris#var#get_set_g_todos

Execute ("test with no g:ephemeris_todos var set):
  if exists('g:ephemeris_todos')
    unlet g:ephemeris_todos
  endif
  let b:tst_todos = ephemeris#var#get_set_g_todos()
  Assert exists('g:ephemeris_todos')
  AssertEqual 'TODOs', b:tst_todos

" test with no g:ephemeris_todos var set
Execute (g:ephemeris_todos should return what the user sets):
  let g:ephemeris_todos = '=== TASK LIST ==='
  let b:tst_todos = ephemeris#var#get_set_g_todos()
  AssertEqual  '=== TASK LIST ===', b:tst_todos

==============================================
