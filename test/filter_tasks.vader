~ Test filter tasks

" filter_tasks(archive) should delete completed tasks from the buffer.  a
" completed task is defined as one that starts with the string `- [x]`.
" filter_tasks() removes lines including a line beginning with the completed
" task marker, up to the end of the file a subsequent 'g:ephephemeris_todos'
" marker or an incomplete task. this means, currently if you have a completed
" task, followed by anything other than a `g:ephemeris_todos` marker OR 2
" newlines, everything following the function until EOF will be filtered OUT,
" i.e. deleted. if {archive} is true, filtered tasks will be moved to a dated
" archive at 'g:ephemeris_diary'/.cache/archive.md


==========================================
# test 1
Given (three lines of tasks and sub-blocks):
  - [x] complete task A, should be removed
    - subblock 1
  - [ ] incomplete task B
    - subblock 2
    more things
  - [x] complete task C
    -more things
    - [ ] should remain

Execute (filter_tasks with no params):
  call ephemeris#lst#filter_tasks()

" Check that the complete task and subblocks have been removed, and
" that the incomplete tasks remain
Expect(filtered tasks):
  - [ ] incomplete task B
    - subblock 2
    more things
    - [ ] should remain

==========================================

# test 1.b
Given (three lines of tasks and sub-blocks):
  - [ðŸŒ•] complete task A, should be removed
  stuff
    - [ðŸŒ˜] subblock 1
  - [ðŸŒ‘]incomplete task B
    - [ðŸŒ“] - subblock 2
    more things
  - [ðŸŒ•] complete task C
    -more things
    - [ðŸŒ‘] should remain

Execute (filter_tasks with no params):
  let g:ephemeris_toggle_list = 'ðŸŒ‘ðŸŒ˜ðŸŒ“ðŸŒ–ðŸŒ•' 
  call ephemeris#lst#filter_tasks()

" Check that the complete task and subblocks have been removed, and
" that the incomplete tasks remain
Expect(unicode filtered tasks):
    - [ðŸŒ˜] subblock 1
  - [ðŸŒ‘]incomplete task B
    - [ðŸŒ“] - subblock 2
    more things
    - [ðŸŒ‘] should remain

==========================================
# test 2
" filtering should stop on 2 newlines, newlines should be preserved
Given (tasks and 2 newlines and list items ensuing):
  - [x] complete task A, should be removed


  - a list item
Execute (filter_tasks):
  unlet g:ephemeris_toggle_list
  call ephemeris#lst#filter_tasks(0)

Expect(2 newlines to halt task filtering, and the list item to remain):
  

  - a list item


==========================================
# test 3
Given (tasks and the default g:ephemeris_todos marker string):
  - [x] complete task A, should be removed
  TODOs
  - a list item
Execute (filter_tasks):
  : call ephemeris#lst#filter_tasks(0)

Expect(the completed task to be removed and the ensuing list item to be preserved):
  TODOs
  - a list item


==========================================
# test 4
Given (unicode tasks):
  - [x](https://test.ok)
  - [x] (+1) completed task should go
  - [x](completed task) should stay because it might be a link

Execute (filter_tasks on url with count):
  : call ephemeris#lst#filter_tasks(0)

****skip
" Expect (the item to remain):
"   - [x](https://test.ok)
"   - [x](completed task) should stay because it might be a link


==========================================
# test filter to archive

Given (a list of tasks):
  - [x] complete task A, should be removed
    - subblock 1
  - [ ] incomplete task B
    - subblock 2
    more things
  - [x] complete task C
    -more things
Execute (filter_tasks with archive = true):
  let g:ephemeris_diary = '.tst_dir'
  let b:cache = g:ephemeris_diary.'/.cache'
  let b:archive_path = b:cache.'/archive.md'

  let g:tst_bufnr = bufnr('%')
  call ephemeris#lst#filter_tasks(1)

  Assert isdirectory(b:cache)
  Assert filereadable(b:archive_path)
  Assert g:tst_bufnr < bufnr(b:archive_path)
  " go to cache
  execute 'b '.bufnr(b:archive_path)
  " check date on first line
  AssertEqual '## ::'.strftime('%Y/%m/%d').'::', getline(1)
  " check task on next line
  AssertEqual '- [x] complete task A, should be removed', getline(2)
  " check task on last line
  AssertEqual '  -more things', getline(5)
  AssertEqual '', getline('$')
  
" ^^ leave 2 spaces for blank line check

" Teardown
Execute (delete test dirs):
  execute 'silent! ! rm -rf .tst_dir'
  Assert ! isdirectory('.tst_dir')
